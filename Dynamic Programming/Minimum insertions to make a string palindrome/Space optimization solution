/*
PROBLEM:
A palindromic string is a string that is the same as its reverse. For example: “nitin” is a palindromic string. 
Now the question states that we are given a string, we need to find the minimum insertions that we can make in that string to make it a palindrome.
*/



public class Solution{
    static int lcs(String s1, String s2) {
    int n=s1.length();
    int m=s2.length();
    int[] prev=new int[m+1];
    int[] cur=new int[m+1];
    // Base Case is covered as we have initialized the prev and cur to 0.
    for(int ind1=1;ind1<=n;ind1++){
        for(int ind2=1;ind2<=m;ind2++){
            if(s1.charAt(ind1-1)==s2.charAt(ind2-1))
                cur[ind2] = 1 + prev[ind2-1];
            else
                cur[ind2] = 0 + Math.max(prev[ind2],cur[ind2-1]);
        }
        prev = (int[])(cur.clone());   
    }
    return prev[m];
}

    static int longestPalindromeSubsequence(String s){
    String t = s;
    String ss=new StringBuilder(s).reverse().toString();
    return lcs(ss,t);
}

    public static int minInsertion(String str) {
        // Write your code here.
         int n = str.length();
        int k = longestPalindromeSubsequence(str);
        return n-k;
    }
}


/*
Time Complexity: O(N*M)
Reason: There are two nested loops.

Space Complexity: O(M)
Reason: We are using an external array of size ‘M+1’ to store only two rows.
*/
