/*
PROBLEM:
We are given an array ‘ARR’ with N positive integers and an integer D. We need to count the number of ways we can partition the given array into two subsets,
S1 and S2 such that S1 – S2 = D and S1 is always greater than or equal to S2.
*/


#include <bits/stdc++.h> 
int mod=(int)(1e9+7);
int solve(int ind ,int sum,vector<int>&arr){
    // base case 
    if(ind==0){
        if(sum==0&&arr[0]==0)return 2;
        if(sum==0||sum==arr[0])return 1;
        return 0;
    }
    //  not take case
    int notTake=solve(ind-1,sum,arr);
    // take case 
    int take=0;
    if(arr[ind]<=sum)take=solve(ind-1,sum-arr[ind],arr);
    return (take+notTake)%mod;
}
int findWays(vector<int>&arr,int tar){
    int n=arr.size();
    
    return solve(n-1,tar,arr);
}
int countPartitions(int n, int d, vector<int> &arr) {
    // Write your code here.
    int totalSum=0;
    for(auto &it:arr)totalSum+=it;
    if(totalSum-d<0||(totalSum-d)%2)return false;
    return findWays(arr,(totalSum-d)/2);

}


//It Gives TLE.
//Solve On COding Ninja
