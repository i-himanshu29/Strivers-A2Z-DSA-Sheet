#include <bits/stdc++.h>
using namespace std;
int mod =(int)1e9+7;
int findWays(vector<int> &arr, int tar){
     int n = arr.size();
    vector<vector<int>> dp(n,vector<int>(tar+1,0));
    if(arr[0] == 0) dp[0][0] =2;  // 2 cases -pick and not pick
    else dp[0][0] = 1;  // 1 case - not pick
    if(arr[0]!=0 && arr[0]<=tar) dp[0][arr[0]] = 1;  // 1 case -pick
    for(int ind = 1; ind<n; ind++){
        for(int sum= 0; sum<=tar; sum++){
            int notTaken = dp[ind-1][sum];
            int taken = 0;
                if(arr[ind]<=sum)
                    taken = dp[ind-1][sum-arr[ind]];
            dp[ind][sum]= (notTaken + taken)%mod;
        }
    }
    return dp[n-1][tar];
}
int countPartitions(int n, int d, vector<int>& arr){
    int totalSum = 0;
    for(int i=0; i<n;i++){
        totalSum += arr[i];
    }
    //Checking for edge cases
    if(totalSum-d <0 || (totalSum-d)%2 ) return 0;
    return findWays(arr,(totalSum-d)/2);
}


/*
Time Complexity: O(N*K)
Reason: There are two nested loops

Space Complexity: O(N*K)
Reason: We are using an external array of size ‘N*K’. Stack Space is eliminated.
*/
