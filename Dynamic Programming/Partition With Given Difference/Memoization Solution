#include <bits/stdc++.h> 
int mod=(int)(1e9+7);
int solve(int ind ,int sum,vector<int>&arr,vector<vector<int>>&dp){
    // base case 
    if(ind==0){
        if(sum==0&&arr[0]==0)return 2;
        if(sum==0||sum==arr[0])return 1;
        return 0;
    }
    if(dp[ind][sum]!=-1)return dp[ind][sum];
    //  not take case
    int notTake=solve(ind-1,sum,arr,dp);
    // take case 
    int take=0;
    if(arr[ind]<=sum)take=solve(ind-1,sum-arr[ind],arr,dp);
    return dp[ind][sum]=(take+notTake)%mod;
}
int findWays(vector<int>&arr,int tar){
    int n=arr.size();
    vector<vector<int>>dp(n,vector<int>(tar+1,-1));
    return solve(n-1,tar,arr,dp);
}
int countPartitions(int n, int d, vector<int> &arr) {
    // Write your code here.
    int totalSum=0;
    for(auto &it:arr)totalSum+=it;
    if(totalSum-d<0||(totalSum-d)%2)return false;
    return findWays(arr,(totalSum-d)/2);

}

/*
Time Complexity: O(N*K)
Reason: There are N*K states therefore at max ‘N*K’ new problems will be solved.

Space Complexity: O(N*K) + O(N)
Reason: We are using a recursion stack space(O(N)) and a 2D array ( O(N*K)).
*/
