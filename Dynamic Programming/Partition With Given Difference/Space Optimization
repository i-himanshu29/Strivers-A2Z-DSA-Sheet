
#include <bits/stdc++.h>
using namespace std;
int mod =(int)1e9+7;
int findWays(vector<int> &arr, int tar){
     int n = arr.size();
   vector<int>prev(tar+1,0),cur(tar+1,0);
    if(arr[0] == 0) prev[0] =2;  // 2 cases -pick and not pick
    else prev[0] = 1;  // 1 case - not pick
    if(arr[0]!=0 && arr[0]<=tar) prev[arr[0]] = 1;  // 1 case -pick
    for(int ind = 1; ind<n; ind++){
        for(int sum= 0; sum<=tar; sum++){
            int notTaken = prev[sum];
            int taken = 0;
                if(arr[ind]<=sum)
                    taken = prev[sum-arr[ind]];
            cur[sum]= (notTaken + taken)%mod;
        }
        prev=cur;
    }
    return prev[tar];
}
int countPartitions(int n, int d, vector<int>& arr){
    int totalSum = 0;
    for(int i=0; i<n;i++){
        totalSum += arr[i];
    }
    //Checking for edge cases
    if(totalSum-d <0 || (totalSum-d)%2 ) return 0;
    return findWays(arr,(totalSum-d)/2);
}



/*
Time Complexity: O(N*K)
Reason: There are three nested loops

Space Complexity: O(K)
Reason: We are using an external array of size ‘K+1’ to store only one row.
*/
