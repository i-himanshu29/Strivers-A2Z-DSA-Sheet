/*
PROBLEM:
We are given an array of strings (sat words[ ]), and we need to return the longest string chain. This longest string chain is defined as:

A subsequence of words[ ] of the string.
Every element of this subsequence ( a string) except the first one can be formed by inserting a single character into the previous element.
The first element of this subsequence can be any string from the words[ ] array.
*/

bool check(string &s1, string &s2){
    if (s1.size()!=s2.size()+1){
        return false;
    }
    else{
        int first=0, second=0;
        while (first<s1.size()){
            if (s1[first]==s2[second]){
                first++, second++;
            }else{
                first++;
            }
        }
        if (first==s1.size() && second==s2.size()){
            return true;
        }else{
            return false;
        }
    }
}
bool comp(string &s1, string &s2){
    return s1.size()<s2.size();
}
int longestStrChain(vector<string> &arr){
    // Write your code here.
      int n=arr.size();
    vector<int> dp(n, 1);
    int maxi=1;
    sort(arr.begin(), arr.end(), comp);
    for (int i=1; i<n; i++){
        for (int j=0; j<i; j++){
            if (check(arr[i], arr[j]) && dp[i]<dp[j]+1){
                dp[i]=dp[j]+1;
            }
        }
        maxi=max(maxi, dp[i]);
    }
    return maxi;
}


/*
Time Complexity: O(N*N * l)
Reason: We are setting up two nested loops and the compare function can be estimated to l, where l is the length of the longest string in the words [ ] array.
Also, we are sorting so the time complexity will be (N^2 * l + NlogN)

Space Complexity: O(N)
Reason: We are only using a single array of size n.
*/
//SOLVE ON CODING NINJA
