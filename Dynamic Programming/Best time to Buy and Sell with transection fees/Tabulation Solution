int maximumProfit(vector<int> &prices, int n, int fee)
{
	  //Write your code here
    if(n==0) return 0;
    
    vector<vector<int>> dp(n+1,vector<int>(2,0));
    
    // base condition is handled by initializing dp array as 0
    
      for(int ind= n-1; ind>=0; ind--){
        for(int buy=0; buy<=1; buy++){
            int profit;
            
            if(buy==0){// We can buy the stock
                profit = max(0+dp[ind+1][0], -prices[ind] + dp[ind+1][1]);
            }
    
            if(buy==1){// We can sell the stock
                profit = max(0+dp[ind+1][1],prices[ind] -fee + dp[ind+1][0]);
            }
            
            dp[ind][buy]  = profit;
        }
    }
    
    return dp[0][0];
}


/*
Time Complexity: O(N*2) 
Reason: There are two nested loops that account for O(N*2) complexity.

Space Complexity: O(N*2)
Reason: We are using an external array of size ‘N*2’. Stack Space is eliminated.
*/
