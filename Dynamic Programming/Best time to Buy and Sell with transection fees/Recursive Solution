/*
PROBLEM:
We are given an array Arr[] of length n. It represents the price of a stock on ‘n’ days. The following guidelines need to be followed:

We can buy and sell the stock any number of times.
In order to sell the stock, we need to first buy it on the same or any previous day.
We can’t buy a stock again after buying it once. In other words, we first buy a stock and then sell it. 
After selling we can buy and sell again. But we can’t sell before buying and can’t buy before selling any previously bought stock.
After every transaction, there is a transaction fee (‘fee’) associated with it.

*/

#include <bits/stdc++.h>

using namespace std;

int getAns(vector<int> &Arr,int ind,int buy,int n,int fee){

    if(ind==n) return 0; //base case
   
    int profit;
    
    if(buy==0){// We can buy the stock
        profit = max(0+getAns(Arr,ind+1,0,n,fee), -Arr[ind] + getAns(Arr,ind+1,1,n,fee));
    }
    
    if(buy==1){// We can sell the stock
        profit = max(0+getAns(Arr,ind+1,1,n,fee), Arr[ind] -fee + getAns(Arr,ind+1,0,n,fee));
    }
    
    return  profit;
}

int maximumProfit(vector<int> &prices, int n, int fee)
{
    if(n==0) return 0;
    int ans = getAns(prices,0,0,n,fee);
    return ans;
}


//IT GIVES TLE.
//SOLVE OMN CODING NINJA
