/*
PROBLEM:
A thief wants to rob a store. He is carrying a bag of capacity W. The store has ‘n’ items of infinite supply. 
Its weight is given by the ‘wt’ array and its value by the ‘val’ array. He can either include an item in its knapsack or exclude it 
but can’t partially have it as a fraction. We need to find the maximum value of items that the thief can steal.
He can take a single item any number of times he wants and put it in his knapsack.
*/

#include <bits/stdc++.h>
using namespace std;

int solve(vector<int>& wt, vector<int>& val, int ind, int W){
    if(ind == 0){
        return ((int)(W/wt[0])) * val[0];
    }   
    int notTaken = 0 + solve(wt,val,ind-1,W);
    int taken = INT_MIN;
    if(wt[ind] <= W)
        taken = val[ind] + solve(wt,val,ind,W-wt[ind]); 
    return  max(notTaken,taken);
}
int unboundedKnapsack(int n, int W, vector<int>& val,vector<int>& wt) {
    return solve(wt, val, n-1, W);
}


//It gives TLE.
//Solve on Coding Ninja.
