/*
PROBLEM:
A palindromic string is a string that is equal to its reverse. For example: “nitin” is a palindromic string.
Now the question states to find the length of the longest palindromic subsequence of a string. 
It is that palindromic subsequence of the given string with the greatest length.
*/
#include <bits/stdc++.h>
using namespace std;

int lcs(string s1, string s2) { 
    int n=s1.size();
    int m=s2.size();
    vector<int> prev(m+1,0), cur(m+1,0);
    
    // Base Case is covered as we have initialized the prev and cur to 0.
    
    for(int ind1=1;ind1<=n;ind1++){
        for(int ind2=1;ind2<=m;ind2++){
            if(s1[ind1-1]==s2[ind2-1])
                cur[ind2] = 1 + prev[ind2-1];
            else
                cur[ind2] = 0 + max(prev[ind2],cur[ind2-1]);
        }
        prev= cur;
    }
    return prev[m];
}
int longestPalindromeSubsequence(string s)
{
    // Write your code here.
    string t= s;
    reverse(t.begin(),t.end());
    return lcs(s,t);
}



/*
Time Complexity: O(N*N)
Reason: There are two nested loops

Space Complexity: O(N*N)
Reason: We are using an external array of size ‘(N*N)’. Stack Space is eliminated.
*/
