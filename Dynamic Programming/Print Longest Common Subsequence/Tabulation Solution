/*
PROBLEM:
n the previous article Longest Common Subsequence, we learned to print the length of the longest common subsequence of two strings.
In this article, we will learn to print the actual string of the longest common subsequence. 
*/


  int longestCommonSubsequence(string text1, string text2, vector<vector<int>>&dp){

        int n = text1.size();

        int m = text2.size();

        for(int i =0 ;i <= n;i++){

            dp[i][0] = 0;

        }

        for(int i =0 ; i<=m;i++){

            dp[0][i] = 0;

        }

        for(int index1 =1 ; index1 <= n ;index1++){

            for(int index2 =1 ; index2 <= m ;index2++){

            if (text1[index1 - 1] == text2[index2 - 1])

{

            dp[index1][index2] = 1+ dp[index1 -1][index2 -1];

            }

            else dp[index1][index2] = max(dp[index1-1][index2] , dp[index1][index2 -1]);
            }

        }
        return dp[n][m];
    }
string findLCS(int n, int m,string &s1, string &s2){
    vector<vector<int>>dp (n+1 , vector<int>(m+1 , 0));
    int len = longestCommonSubsequence(s1 , s2 , dp);
    string ans;
    int i = n;
    int j = m;
    while (i > 0 && j > 0) {
        if (s1[i - 1] == s2[j - 1]) {
            ans.push_back(s1[i - 1]);
            i--;
            j--;
        } else if (dp[i - 1][j] > dp[i][j - 1]) {
            i--;
        } else {
            j--;
        }
    }
    reverse(ans.begin(), ans.end());
    return ans ;// reverse string 
}

/*

Time Complexity: O(N*M)
Reason: There are two nested loops

Space Complexity: O(N*M)
Reason: We are using an external array of size ‘N*M’. Stack Space is eliminated.
*/

