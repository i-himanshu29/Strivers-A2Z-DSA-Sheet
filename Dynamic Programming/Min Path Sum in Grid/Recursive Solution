/*
PROBLEM:
We are given an “N*M” matrix of integers. We need to find a path from the top-left corner to the bottom-right corner of the matrix, 
such that there is a minimum cost past that we select.
At every cell, we can move in only two directions: right and bottom. The cost of a path is given as the sum of values of cells of the given matrix.
*/


#include <bits/stdc++.h> 
int f(int i,int j,vector<vector<int>> &grid){
    if(i==0 && j==0) return grid[0][0];
    if(i<0 || j<0) return 1e9;

    int up=grid[i][j]+f(i-1,j,grid);
    int left= grid[i][j]+f(i,j-1,grid);

    return min(up,left);
}
int minSumPath(vector<vector<int>> &grid) {
    int n=grid.size();
    int m=grid[0].size();
    return f(n-1,m-1,grid);
}

// It gives TLE.
//Solve on Coding Ninja.
