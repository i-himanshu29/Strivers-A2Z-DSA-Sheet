/*
PROBLEM:
We are given an array Arr[] of length n. It represents the price of a stock on ‘n’ days. The following guidelines need to be followed:

We can buy and sell the stock any number of times.
In order to sell the stock, we need to first buy it on the same or any previous day.
We can’t buy a stock again after buying it once. In other words, we first buy a stock and then sell it. After selling we can buy and sell again.
But we can’t sell before buying and can’t buy before selling any previously bought stock.

*/

#include <bits/stdc++.h>

using namespace std;

long getAns(long *Arr, int ind, int buy, int n){

    if(ind==n) return 0; //base case
    
        
    long profit;
    
    if(buy==0){// We can buy the stock
        profit = max(0+getAns(Arr,ind+1,0,n), -Arr[ind] + getAns(Arr,ind+1,1,n));
    }
    
    if(buy==1){// We can sell the stock
        profit = max(0+getAns(Arr,ind+1,1,n), Arr[ind] + getAns(Arr,ind+1,0,n));
    }
    
    return  profit;
}


long getMaximumProfit(long *Arr, int n)
{
    if(n==0) return 0;
    long ans = getAns(Arr,0,0,n);
    return ans;
}



// SOLVE ON CODING NINJA
// IT GIVES TLE.
