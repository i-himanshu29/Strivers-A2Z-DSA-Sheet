
bool wildcardMatching(string pattern, string text)
{
   // Write your code here.
   int n=pattern.size();
   int m=text.size();
   vector<bool>prev(m+1,false),cur(m+1,false);
   prev[0]=true;
   for(int j=1;j<=m;j++){
      prev[j]=false;
   }

   for(int i=1;i<=n;i++){
      bool flag=true;
      for(int ii=1;ii<=i;ii++){
        if (pattern[ii - 1] != '*') {
          flag = false;
          break;
           }
         }
            cur[0]=flag;
            for(int j=1;j<=m;j++){
               if(pattern[i-1]==text[j-1]||pattern[i-1]=='?'){
                  cur[j]= prev[j-1];
               } else if (pattern[i - 1] == '*') {
                  cur[j] = prev[j] | cur[j - 1];
               } else
                  cur[j] = false;
            }
            prev=cur;
         }
            return prev[m];
         
}



/*
Time Complexity: O(N*M)
Reason: There are two nested loops.

Space Complexity: O(M)
Reason: We are using an external array of size ‘M+1’ to store two rows.
*/
