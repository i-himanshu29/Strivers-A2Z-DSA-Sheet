int solve(int ind, int N,vector<int>price,vector<vector<int>>&dp){
	if(ind==0){
		return N*price[0];
	}
	if(dp[ind][N]!=-1)return dp[ind][N];
	int notTake=0+solve(ind-1,N,price,dp);
	int take=INT_MIN;
	int rodLength=ind+1;
        if (rodLength <= N) {
                take = price[ind] + solve(ind,N-rodLength,price,dp );
        }
	return dp[ind][N]= max(take,notTake);
}
int cutRod(vector<int> &price, int n)
{
	vector<vector<int>>dp(n,vector<int>(n+1,-1));
	return solve(n-1,n,price,dp);
	
}


/*
Time Complexity: O(N*N)
Reason: There are N*(N+1) states therefore at max ‘N*(N+1)’ new problems will be solved.

Space Complexity: O(N*N) + O(N)
Reason: We are using a recursion stack space(O(N)) and a 2D array ( O(N*(N+1)).
*/
