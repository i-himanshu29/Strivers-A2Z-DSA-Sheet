/*
PROBLEM:
A thief wants to rob a store. He is carrying a bag of capacity W. The store has ‘n’ items. Its weight is given by the ‘wt’ array and its value by the ‘val’ array.
He can either include an item in its knapsack or exclude it but can’t partially have it as a fraction. We need to find the maximum value of items that the thief 
can steal.
*/

#include <bits/stdc++.h>
using namespace std;
int knapsackUtil(vector<int>& wt, vector<int>& val, int ind, int W, vector<vector<int>>& dp){
    if(ind == 0){
        if(wt[0] <=W) return val[0];
        else return 0;
    }
    if(dp[ind][W]!=-1)
        return dp[ind][W];
    int notTaken = 0 + knapsackUtil(wt,val,ind-1,W,dp);
    int taken = INT_MIN;
    if(wt[ind] <= W)
        taken = val[ind] + knapsackUtil(wt,val,ind-1,W-wt[ind],dp);
    return dp[ind][W] = max(notTaken,taken);
}

int knapsack(vector<int>& wt, vector<int>& val, int n, int W){
    vector<vector<int>> dp(n,vector<int>(W+1,-1));
    return knapsackUtil(wt, val, n-1, W, dp);
}

/*
Time Complexity: O(N*W)
Reason: There are N*W states therefore at max ‘N*W’ new problems will be solved.

Space Complexity: O(N*W) + O(N)
Reason: We are using a recursion stack space(O(N)) and a 2D array ( O(N*W)).
*/
