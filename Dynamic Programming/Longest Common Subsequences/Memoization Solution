#include <bits/stdc++.h>

using namespace std;
int solve(int i,int j,string &s,string &t,vector<vector<int>>&dp){
	if(i<0||j<0) return 0;
	if(dp[i][j]!=-1)return dp[i][j];
	if(s[i]==t[j])
	return dp[i][j]= 1+solve(i-1,j-1,s,t,dp);
	return dp[i][j]= max(solve(i-1,j,s,t,dp),solve(i,j-1,s,t,dp));
}
int lcs(string s, string t)
{
	
	int n=s.size();
	int m=t.size();
	vector<vector<int>>dp(n,vector<int>(m,-1));
	return solve(n-1,m-1,s,t,dp);
}



/*
Time Complexity: O(N*M)
Reason: There are N*M states therefore at max ‘N*M’ new problems will be solved.

Space Complexity: O(N*M) + O(N+M)
Reason: We are using an auxiliary recursion stack space(O(N+M)) (see the recursive tree, in the worst case, we will go till N+M calls at a time) and a 2D array ( O(N*M)).
*/
