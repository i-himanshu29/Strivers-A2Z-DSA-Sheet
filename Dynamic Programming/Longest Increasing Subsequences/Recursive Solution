/*
PROBLEM:
In the coming articles, we will discuss problems related to ‘Longest Increasing Subsequence’. Before proceeding further, 
let us understand the “Longest Increasing Subsequence”, or rather what is a “subsequence”?

A subsequence of an array is a list of elements of the array where some elements are deleted ( or not deleted at all) and 
they should be in the same order in the subsequence as in the original array.

For example, for the array: [2,3,1] , the subsequences will be [{2},{3},{1},{2,3},{2,1},{3,1},{2,3,1}} but {3,2} is not a subsequence 
because its elements are not in the same order as the original array.

What is the Longest Increasing Subsequence?

The longest increasing subsequence is described as a subsequence of an array where:

All elements of the subsequence are in increasing order.
This subsequence itself is of the longest length possible.
*/

                                                                

#include <bits/stdc++.h>
using namespace std;
int getAns(int arr[], int n,  int ind, int prev_index){
    // base condition
    if(ind == n)
        return 0;
    
    int notTake = 0 + getAns(arr,n,ind+1,prev_index);
    int take = 0;
    if(prev_index == -1 || arr[ind] > arr[prev_index]){
        take = 1 + getAns(arr,n,ind+1,ind);
    }
    
    return  max(notTake,take);
}
int longestIncreasingSubsequence(int arr[], int n){
    return getAns(arr,n,0,-1);
}


                                                                
//IT GIVES TLE.
//SOLVE ON CODING NINJA.
