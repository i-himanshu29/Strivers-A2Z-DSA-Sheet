int SpacemaxProf(int n,vector<int>&val){
vector<vector<int>> ahead (2,vector<int>(3,0)),curr(2,vector<int>(3,0));
    for(int ind= n-1;ind>=0;ind--){
        for(int buy = 0;buy<=1;buy++){
            for(int cap= 1;cap<=2;cap++){ // cap =1 as for cap =0 everthin is zero !!!!!!!base-case!!!!!
                int profit = 0;
                    if(buy){
                        int take = -val[ind]+ ahead[0][cap];
                        int not_take = 0 + ahead[1][cap];
                        profit= max(take,not_take);
                    }else{
                        int take = val[ind]+ ahead[1][cap-1];
                        int not_take = 0 + ahead[0][cap];
                        profit= max(take,not_take);
                    }
                    curr[buy][cap] = profit;
            }
        }
        ahead = curr; 
    }

    return ahead[1][2];
}

int maxProfit(vector<int>& prices)
{
    int n=prices.size();
    return SpacemaxProf(n,prices);
}


/*

Time Complexity: O(N*2*3)
Reason: There are three nested loops that account for O(N*2*3) complexity

Space Complexity: O(1)
Reason: We are using two external arrays of size ‘2*3’.

*/
