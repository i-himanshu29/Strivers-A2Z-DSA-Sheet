int TabumaxProf(int n,vector<int>&val,vector<vector<vector<int>>>&dp){

    for(int ind= n-1;ind>=0;ind--){
        for(int buy = 0;buy<=1;buy++){
            for(int cap= 1;cap<=2;cap++){ // cap =1 as for cap =0 everthin is zero !!!!!!!base-case!!!!!
                int profit = 0;
                    if(buy){
                        int take = -val[ind]+ dp[ind+1][0][cap];
                        int not_take = 0 + dp[ind+1][1][cap];
                        profit= max(take,not_take);
                    }else{
                        int take = val[ind]+ dp[ind+1][1][cap-1];
                        int not_take = 0 + dp[ind+1][0][cap];
                        profit= max(take,not_take);
                    }
                    dp[ind][buy][cap] = profit;
            }
        }
    }

    return dp[0][1][2];
}
int maxProfit(vector<int>& prices)
{
    int n=prices.size();
vector<vector<vector<int>>> dp (n+1,vector<vector<int>>(2,vector<int>(3,0)));
     return TabumaxProf(n,prices,dp);
}

/*
Time Complexity: O(N*2*3) 
Reason: There are three nested loops that account for O(N*2*3) complexity.

Space Complexity: O(N*2*3)
Reason: We are using an external array of size ‘N*2*3’. Stack Space is eliminated.
*/
