/*
PROBLEM:
        We are given an ‘N*M’ matrix. We need to find the maximum path sum from any cell of the first row to any cell of the last row.
        At every cell we can move in three directions: to the bottom cell (↓), to the bottom-right cell(↘), or to the bottom-left cell(↙).
*/


#include <bits/stdc++.h> 
int f(int i,int j,vector<vector<int>> &matrix){
    if(j<0 || j>=matrix[0].size()) return -1e8;
    if(i==0) return matrix[0][j];
    int s=matrix[i][j]+ f(i-1,j,matrix);
    int leftDown=matrix[i][j]+f(i-1,j-1,matrix);
    int rightDown=matrix[i][j]+f(i-1,j+1,matrix);
    return max(s,max(leftDown,rightDown));
}
int getMaxPathSum(vector<vector<int>> &matrix)
{
    int n=matrix.size();
    int m=matrix[0].size();
    int maxi=-1e8;
    for(int j=0;j<m;j++)
    maxi=max(maxi,f(n-1,j,matrix));
    return maxi;
}

//It gives TLE.
//Solve On Coding Ninja.
