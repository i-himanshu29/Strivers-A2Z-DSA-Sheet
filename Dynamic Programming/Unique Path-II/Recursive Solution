/*
PROBLEM:
We are given an “N*M” Maze. The maze contains some obstacles. A cell is ‘blockage’ in the maze if its value is -1.
0 represents non-blockage. There is no path possible through a blocked cell.

We need to count the total number of unique paths from the top-left corner of the maze to the bottom-right corner.
At every cell, we can move either down or towards the right.
*/

int mod=(int)(1e9+7);
int f(int i,int j,vector< vector< int> > &mat){
    if(i>=0&& j>=0 && mat[i][j]==-1) return 0;
    if(i==0 && j==0)return 1;
    if(i<0 && j<0)return 0;
    int up=f(i-1,j,mat);
    int left=f(i,j-1,mat);

    return up+left;
}
int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
    return f(n-1,m-1,mat);
}


//It give TLE.
//solve on coding ninja.
