int mod=(int)(1e9+7);
#include <bits/stdc++.h> 
int findWays(vector<int>&num,int tar){
    int n=num.size();
    vector<int>prev(tar+1,0),cur(tar+1,0);
    if(num[0]==0)prev[0]=2;
    else prev[0]=1;
    if(num[0]!=0 && num[0]<=tar)prev[num[0]]=1;
    for(int ind=1;ind<n;ind++){
        for(int sum=0;sum<=tar;sum++){
            int notTake=prev[sum];
            int take=0;
            if(num[ind]<=sum)take=prev[sum-num[ind]];
            cur[sum]=(notTake+take)%mod;
        }
        prev=cur;
    }
    return prev[tar];
}

int countPartition(int n,int d,vector<int>&arr){
    int totalSum=0;
    for(auto &it:arr)totalSum+=it;
    if(totalSum-d<0||(totalSum-d)%2)return false;
    return findWays(arr,(totalSum-d)/2);
}
int targetSum(int n, int target, vector<int>& arr) {
    // Write your code here.
    return countPartition(n,target,arr);
}


/*
Time Complexity: O(N*K)
Reason: There are three nested loops

Space Complexity: O(K)
Reason: We are using an external array of size ‘K+1’ to store only one row.
*/
