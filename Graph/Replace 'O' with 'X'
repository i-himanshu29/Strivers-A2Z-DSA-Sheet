/*
Problem Statement:
Given a matrix mat of size N x M where every element is either ‘O’ or ‘X’. Replace all ‘O’ with ‘X’ that is surrounded by ‘X’. 
An ‘O’ (or a set of ‘O’) is considered to be surrounded by ‘X’ if there are ‘X’ at locations just below, just above just left, and just right of it.
*/


#include<vector>
void dfs(int r,int c,vector<vector<int>>&vis,char** arr){
    int n=vis.size();
    int m=vis[0].size();
    vis[r][c]=1;
    int delrow[]={-1,0,1,0};
    int delcol[]={0,-1,0,1};
    for(int i=0;i<4;i++){
        int nrow=r+delrow[i];
        int ncol=c+delcol[i];
        if(nrow >=0 && nrow <n && ncol >= 0 && ncol < m && !vis[nrow][ncol] && arr[nrow][ncol] == 'O'){
        dfs(nrow,ncol,vis,arr);
        }
    }
}
void replaceOWithX(char** arr, int n, int m)   {
//Write your code here
    vector<vector<int>>vis(n,vector<int>(m,0));
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if((i==0 || i==n-1) and vis[i][j]==0 and arr[i][j]=='O'){
                dfs(i,j,vis,arr);
            }
        }
}
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if((j==0 || j==m-1) and vis[i][j]==0 and arr[i][j]=='O'){
                dfs(i,j,vis,arr);
            }
        }
    }
    for(int i=0;i<n;i++){
    for(int j=0;j<m;j++){
        if(arr[i][j]=='O' and vis[i][j]==0){
            arr[i][j]='X';
            }
        }
    }
}
