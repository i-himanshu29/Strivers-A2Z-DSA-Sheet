/*
PROBLEM:
You will be given an m x n grid, where each cell has the following values : 

2  –  represents a rotten orange
1  –  represents a Fresh orange
0  –  represents an Empty Cell
Every minute, if a Fresh Orange is adjacent to a Rotten Orange in 4-direction ( upward, downwards, right, and left ) it becomes Rotten. 

Return the minimum number of minutes required such that none of the cells has a Fresh Orange. If it’s not possible, return -1.

*/




#include<bits/stdc++.h>
using namespace std;
int minTimeToRot(vector<vector<int>>& grid, int n, int m)
{
    // Write your code here. 
    n=grid.size();
    m=grid[0].size();
    queue<pair<pair<int,int>,int>>q;
    int vis[n][m];
    int cntFresh=0;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(grid[i][j]==2){
                q.push({{i,j},0});
                vis[i][j]=2;
            }
            else{
                vis[i][j]=0;

            }
            if(grid[i][j]==1)cntFresh++;
        }
    }
    int tm=0;
    int drow[]={-1,0,+1,0};
    int dcol[]={0,+1,0,-1};
    int cnt=0;
    while(!q.empty()){
        int r=q.front().first.first;
        int c=q.front().first.second;
        int t=q.front().second;
        tm=max(tm,t);
        q.pop();
        for(int i=0;i<4;i++){
            int nrow=r+drow[i];
            int ncol=c+dcol[i];
            
            if(nrow>=0&&nrow<n&&ncol>=0&&ncol<m&&vis[nrow][ncol]==0&&
            grid[nrow][ncol]==1){
                q.push({{nrow,ncol},t+1});
                vis[nrow][ncol]=2;
                cnt++;
            }
        }

    }
    if(cnt!=cntFresh)return -1;
    return tm;
}




//SOLVE ON CODING NINJA


/*

Time Complexity: O ( n x n ) x 4    
Reason: Worst-case – We will be making each fresh orange rotten in the grid and for each rotten orange will check in 4 directions

Space Complexity: O ( n x n )
Reason: worst-case –  If all oranges are Rotten, we will end up pushing all rotten oranges into the Queue data structure

*/
