/*
PROBLEM:
Given a binary grid of N*M. Find the distance of the nearest 1 in the grid for each cell.
The distance is calculated as |i1  – i2| + |j1 – j2|, where i1, j1 are the row number and column number of the current cell, 
and i2, j2 are the row number and column number of the nearest cell having value 1.
*/

#include <queue>
using std::queue;
vector<vector<int>> nearest(vector<vector<int>> &mat, int n, int m) {
  vector<vector<int>> vis(n, vector<int>(m, 0));
  vector<vector<int>> dis(n, vector<int>(m, 0));
  queue<pair<pair<int,int>,int>> q;
  for(int i=0;i<n;i++){
      for(int j=0;j<m;j++){
          if(mat[i][j]==1){
              vis[i][j]=1;
              q.push({{i,j},0});
          }
      }
  }
  int delRow[]={-1,0,1,0};
  int delCol[]={0,1,0,-1};
  while(!q.empty()){
      int row=q.front().first.first;
      int col=q.front().first.second;
      int steps = q.front().second;
      q.pop();
      dis[row][col]=steps;
      for(int i=0;i<4;i++){
          int nrow=row+delRow[i];
          int ncol=col+delCol[i];
          if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && vis[nrow][ncol]!=1){
                vis[nrow][ncol]=1;
                q.push({{nrow,ncol},steps+1});
            }
        }
    }
    return dis;
}

/*

Time Complexity: O(NxM + NxMx4) ~ O(N x M)
For the worst case, the BFS function will be called for (N x M) nodes, and for every node, we are traversing for 4 neighbors,
so it will take O(N x M x 4) time.

Space Complexity: O(N x M) + O(N x M) + O(N x M) ~ O(N x M)
O(N x M) for the visited array, distance matrix, and queue space takes up N x M locations at max. 

*/
