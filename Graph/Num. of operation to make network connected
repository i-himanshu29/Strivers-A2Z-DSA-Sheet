/*

Problem Statement: 
You are given a graph with n vertices and m edges. You can remove one edge from anywhere and add that edge between any two vertices in one operation. 
Find the minimum number of operations that will be required to make the graph connected. If it is not possible to make the graph connected, return -1.

*/

class disjointSet{
public:
	vector<int>rank,par;
	disjointSet(int n)
	{
		rank.resize(n+1,0);
		par.resize(n+1);
		for(int i=0;i<=n;i++){par[i]=i;}
	}

	int findp(int n)
	{
		if(n==par[n])return n;
        return par[n]=findp(par[n]);
	}

	void unionn(int u,int v)
	{
		int uu=findp(u),uv=findp(v);
		if(uu==uv)return;

		if(rank[uv]<rank[uu])par[uv]=uu;
	   else if(rank[uv]>rank[uu])par[uu]=uv;
		else{par[uv]=uu;rank[uu]++;}
	}
};
int makeGraphConnected(int n, vector < pair < int,int > > edges, int m) 
{
	if(m<n-1)return -1;
	disjointSet ds(n);
	for(auto i:edges)
	{
		if(ds.findp(i.first)!=ds.findp(i.second))
		{ ds.unionn(i.first,i.second); n--;}
	}
    return n-1;
}

/*
Time Complexity: 
O(E*4α)+O(N*4α) where E = no. of edges and N = no. of nodes.
The first term is to calculate the number of extra edges and the second term is to count the number of components.
4α is for the disjoint set operation we have used and this term is so small that it can be considered constant.

Space Complexity: O(2N) where N = no. of nodes. 2N for the two arrays(parent and size) of size N we have used inside the disjoint set.
*/

//SOLVED ON CODING NINJA
