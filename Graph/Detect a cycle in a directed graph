bool dfs(int node, int vis[], int pathVis[], vector<int> adj[])
{
  vis[node]=1;
  pathVis[node]=1;

  for(auto i: adj[node])
  {
    // if node not visited
    if(!vis[i])
    {
      if(dfs(i, vis, pathVis, adj)==true)
      {
        return true;
      }
    }
    // if visited, then has to be pathvisited also.
    else if(pathVis[i])
    {
      return true;
    }
  }

  pathVis[node]=0;
  return false;
}
int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  // Write your code here.
  vector<int> adj[n+1];
  for(auto i: edges)
  {
    adj[i.first].push_back(i.second);
  }
  int vis[n+1]={0};
  int pathVis[n+1]={0};
  // components
  for(int i=0;i<n;i++)
  {
    if(!vis[i])
    {
      if(dfs(i, vis, pathVis, adj)==true)
      {
        return 1;
      }
    }
  }
  
  return 0;
}


/*
T.C -> O(N)+O(2E)
S.c -> O(V)

*/
