/*
PROBLEM:
Given an undirected graph, return a vector of all nodes by traversing the graph using depth-first search (DFS).
*/

#include <bits/stdc++.h>
void dfs(unordered_map<int,vector<int>> &adj,unordered_map<int,bool> &visited,vector<vector<int>> &ans,int node){
    vector<int> temp;
    //Using standard DS Stack for DFS Traversal
    stack<int> s;
    s.push(node);
    visited[node]=true;
    while(!s.empty()){
        auto Top=s.top();
        s.pop();
        temp.push_back(Top);
        for(auto i:adj[Top]){
            if(!visited[i]){
                s.push(i);
                visited[i]=true;
            }
        }
    }
    ans.push_back(temp);
}
vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    unordered_map<int,vector<int>> adj;
    vector<vector<int>> ans;
    unordered_map<int,bool> visited;
    // Mapping edges for nodes
    for(int i=0;i<E;i++){
        int u=edges[i][0];
        int v=edges[i][1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    // DFS traversal
    for(int i=0;i<V;i++){
        if(!visited[i]){
            dfs(adj,visited,ans,i);
            visited[i]=true;
        }
    }
    return ans;
}

/*
Time Complexity: For an undirected graph, O(N) + O(2E), For a directed graph, O(N) + O(E),

Space Complexity: O(3N) ~ O(N), Space for dfs stack space, visited array and an adjacency list.

*/
