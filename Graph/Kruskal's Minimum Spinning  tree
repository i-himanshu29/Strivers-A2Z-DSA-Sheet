/*
Problem Statement:
Given a weighted, undirected, and connected graph of V vertices and E edges.
The task is to find the sum of weights of the edges of the Minimum Spanning Tree.

*/


#include <bits/stdc++.h> 

class disjoint{

    vector<int> size,parent;

    public:

     disjoint(int n){

        parent.resize(n+1,0);

        size.resize(n+1,0);

        for(int i=0;i<n;i++){  //initialising the parent vector

            parent[i]=i;

        }

    }

    int uparent(int node){

        if(node==parent[node]){

            return node;

        }

        return parent[node]=uparent(parent[node]);

    }

    void unionbysize(int u,int v){

        int ulp_u=uparent(u);

        int ulp_v=uparent(v);

        if(ulp_u==ulp_v) return;

        if(size[ulp_u] > size[ulp_v]){

            parent[ulp_v]=ulp_u;

            size[ulp_u]+=size[ulp_v];

        }

        else{

            parent[ulp_u]=ulp_v;

            size[ulp_v]+=size[ulp_u];

        }

    }

};

int kruskalMST(int n, vector<vector<int>> &edges) {
    disjoint ds(n);
    sort(edges.begin(), edges.end(), [](vector<int> &a, vector<int> &b) {
        return a[2] < b[2];
    });

    int sum = 0;
    for (vector<int> &edge : edges) {
        int u = edge[0];
        int v = edge[1];
        int wt = edge[2];

        if (ds.uparent(u) != ds.uparent(v)) {
            sum += wt;
            ds.unionbysize(u, v);
        }
    }

    return sum;
}


/*
Time Complexity:
O(N+E) + O(E logE) + O(E*4Î±*2)   where N = no. of nodes and E = no. of edges. O(N+E) for extracting edge information from the adjacency list.
O(E logE) for sorting the array consists of the edge tuples. Finally, we are using the disjoint set operations inside a loop.
The loop will continue to E times. Inside that loop, there are two disjoint set operations like findUPar() and UnionBySize() each taking 4 and
so it will result in 4*2. That is why the last term O(E*4*2) is added.

Space Complexity:
O(N) + O(N) + O(E) where E = no. of edges and N = no. of nodes. O(E) space is taken by the array that we are using to store the edge information.
And in the disjoint set data structure, we are using two N-sized arrays i.e. a parent and a size array (as we are using unionBySize() function otherwise, 
a rank array of the same size if unionByRank() is used) which result in the first two terms O(N).
*/
//    SOLVED ON CODING NINJA
