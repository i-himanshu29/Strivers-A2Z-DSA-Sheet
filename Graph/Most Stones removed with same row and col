/*
Problem Statement: 
There are n stones at some integer coordinate points on a 2D plane. Each coordinate point may have at most one stone.

You need to remove some stones. 

A stone can be removed if it shares either the same row or the same column as another stone that has not been removed.

Given an array of stones of length n where stones[i] = [xi, yi] represents the location of the ith stone,
return the maximum possible number of stones that you can remove.
*/

#include <bits/stdc++.h> 
class Disjoint{
    public:
    vector<int>parent,size;
    Disjoint(int n){
        size.resize(n+1,1);
        parent.resize(n+1);
        for(int i=0;i<=n;i++){
            parent[i]=i;
        }
    }
    int findUpar(int node){
        if(node == parent[node]){
            return node;
        }
        return parent[node]=findUpar(parent[node]);
    }
    void unionBySize(int u, int v){
        int ulp_u=findUpar(u);
        int ulp_v=findUpar(v);
        if(ulp_u == ulp_v){
            return;
        }
        if(size[ulp_u] < size[ulp_v]){
            parent[ulp_u]=ulp_v;
            size[ulp_v]+=size[ulp_u];
        }
        else{
            parent[ulp_v]=ulp_u;
            size[ulp_u]+=size[ulp_v];
        }
    }
};
int removeStones(vector<vector<int>> &stones){
    // Write your code here.
     int n=stones.size();
        int maxrow=0;
        int maxcol=0;
        for(auto it:stones){
            maxrow=max(maxrow,it[0]);
            maxcol=max(maxcol,it[1]);
        }
        Disjoint ds(maxrow+maxcol+1);
        unordered_map<int,int>mp;
        for(auto it:stones){
            int noderow=it[0];
            int nodecol=it[1]+maxrow+1;
            ds.unionBySize(noderow,nodecol);
            mp[noderow]=1;
            mp[nodecol]=1;
        }
        int cnt=0;
        for(auto it:mp){
            if(ds.findUpar(it.first) == it.first){
                cnt++;
            }
        }
    return n-cnt;
}

//SOLVE ON CODING NINJA
/*
Time Complexity: 
O(N), where N = total no. of stones. Here we have just traversed the given stones array several times.
And inside those loops, every operation is apparently taking constant time. So, the time complexity is only the time of traversal of the array.

Space Complexity: O(2* (max row index + max column index)) for the parent and size array inside the Disjoint Set data structure.
*/
