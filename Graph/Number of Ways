/*
PROBLEM:
You are in a city that consists of n intersections numbered from 0 to n – 1 with bi-directional roads between some intersections. 
The inputs are generated such that you can reach any intersection from any other intersection and that there is at most one road between any two intersections.

*/


int numberOfWays(int n, int m, vector<vector<int>> &edges)
{
    const int mod = 1e9 + 7;

    // Initializing arrays 'ways' of size 'N' with 0 and 'dis' of size 'N' with 10^9.
    vector<int> ways(n), dis(n, 1e9);

    // Initializing a priority queue 'pq', which stores the distance of any node with 0 and that node.
    priority_queue<pair<int, int>, 
            vector<pair<int, int>>, 
            greater<pair<int, int>>> pq;

    // Creating an adjacency list 'adj' using given edges, which stores {destination, weight}.
    vector<pair<int, int>> adj[n];
    for (int i = 0; i < m; i++)
    {
        adj[edges[i][0]].push_back({edges[i][1], edges[i][2]});
        adj[edges[i][1]].push_back({edges[i][0], edges[i][2]});
    }

    dis[0] = 0;
    ways[0] = 1;
    pq.push({dis[0], 0});

    // Calculating answer.
    while (pq.size() > 0)
    {
        int d = pq.top().first;
        int u = pq.top().second;
        pq.pop();
        for (auto i : adj[u])
        {
            int v = i.first;
            int w = i.second;
            if (dis[v] > dis[u] + w)
            {
                dis[v] = dis[u] + w;
                ways[v] = ways[u];
                pq.push({dis[v], v});
            }
            
            else if (dis[v] == dis[u] + w)
            {
                ways[v] = (ways[v] + ways[u]) % mod;
            }
        }
    }

    return ways[n - 1];
}

//SOLVE ON CODING NINJA
/*
Time Complexity: 
O( E* log(V)) { As we are using simple Dijkstra’s algorithm here, the time complexity will be or the order E*log(V)}
Where E = Number of edges and V = No. of vertices.

Space Complexity : 
O(N) { for dist array + ways array + approximate complexity for priority queue }
Where, N = Number of nodes.
*/
